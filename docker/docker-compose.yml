version: "3.6"

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-extending_airflow:lastest}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    # AIRFLOW_CONN_SPARK_LOCAL: spark://spark:7077
    # AIRFLOW_CONN_HIVE_DEFAULT: thrift://hive-server:10000/default

  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  jupyterlab:
    platform: linux/amd64
    image: wittline/jupyterlab:3.0.0-spark-3.0.0
    container_name: jupyterlab
    ports:
      - 8889:8889
      - 4040:4040
    volumes:
      - ./workspace:/opt/workspace
  spark-master:
    platform: linux/amd64
    image: wittline/spark-master:3.0.0
    container_name: spark-master
    ports:
      - 8083:8080
      - 7077:7077
    env_file:
      - ./base/hadoop/hadoop-hive.env
    depends_on:
      - hive-server
    volumes:
      - ./workspace:/opt/workspace
      - ./base/spark_conf/hadoop:/etc/hadoop/conf/
      - ./base/spark_conf/hive/hive-site.xml:/usr/bin/spark-3.0.0-bin-hadoop3.2/conf/hive-site.xml
  spark-worker-1:
    platform: linux/amd64
    image: wittline/spark-worker:3.0.0
    container_name: spark-worker-1
    depends_on:
      - spark-master    
    environment:
      - SPARK_MASTER=spark://spark-master:7077      
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1024m      
    ports:
      - 8081:8081
    env_file:
      - ./base/hadoop/hadoop-hive.env
    volumes:
      - ./workspace:/opt/workspace
      - ./base/spark_conf/hadoop:/etc/hadoop/conf/
      - ./base/spark_conf/hive/hive-site.xml:/usr/bin/spark-3.0.0-bin-hadoop3.2/conf/hive-site.xml
  spark-worker-2:
    platform: linux/amd64
    image: wittline/spark-worker:3.0.0
    container_name: spark-worker-2
    depends_on:
      - spark-master     
    environment:
      - SPARK_MASTER=spark://spark-master:7077      
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1024m  
    ports:
      - 8082:8081
    env_file:
      - ./base/hadoop/hadoop-hive.env
    volumes:
      - ./workspace:/opt/workspace
      - ./base/spark_conf/hadoop:/etc/hadoop/conf/
      - ./base/spark_conf/hive/hive-site.xml:/usr/bin/spark-3.0.0-bin-hadoop3.2/conf/hive-site.xml
  
  namenode:
    platform: linux/amd64
    image: fjardim/namenode_sqoop
    container_name: namenode
    hostname: namenode
    volumes:
      - ./base/hdfs/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./base/hadoop/hadoop-hive.env
    ports:
      - "50070:50070"
    deploy:
      resources:
        limits:
          memory: 10g

  datanode1:
    platform: linux/amd64
    image: fjardim/datanode
    container_name: datanode1
    hostname: datanode1
    volumes:
      - ./base/hdfs/datanode1:/hadoop/dfs/data
    env_file:
      - ./base/hadoop/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    depends_on:
      - namenode
    ports:
      - "50075:50075"
    deploy:
      resources:
        limits:
          memory: 10g

  datanode2:
    platform: linux/amd64
    image: fjardim/datanode
    container_name: datanode2
    hostname: datanode2
    volumes:
      - ./base/hdfs/datanode2:/hadoop/dfs/data
    env_file:
      - ./base/hadoop/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    depends_on:
      - namenode
    ports:
      - "50080:50075"
    deploy:
      resources:
        limits:
          memory: 10g
  
  hive-server:
    platform: linux/amd64
    image: fjardim/hive
    container_name: hive-server
    hostname: hive_server
    env_file:
      - ./base/hadoop/hadoop-hive.env
    volumes:
      - ./workspace:/opt/workspace
      - ./base/spark_conf/hive/hive-site.xml:/opt/hive/conf/hive-site.xml

    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    depends_on:
      - hive-metastore
    deploy:
      resources:
        limits:
          memory: 10g
  
  hive-metastore:
    platform: linux/amd64
    image: fjardim/hive
    container_name: hive_metastore
    hostname: hive_metastore
    env_file:
      - ./base/hadoop/hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode1:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    depends_on:
      - hive-metastore-postgresql
    deploy:
      resources:
        limits:
          memory: 10g
  
  hive-metastore-postgresql:
    platform: linux/amd64
    image: fjardim/hive-metastore
    container_name: hive-metastore-postgresql
    hostname: hive_metastore_postgresql
    volumes:
      - ./base/postgresql:/var/lib/postgresql/data
    depends_on:
      - datanode1
      - datanode2
    deploy:
      resources:
        limits:
          memory: 10g

  hue:
    platform: linux/amd64
    image: fjardim/hue
    hostname: hue
    container_name: hue
    ports:
    - "8888:8888"
    volumes:
      - ./base/hue/hue-overrides.ini:/usr/share/hue/desktop/conf/z-hue.ini
    depends_on:
      - "database"
    deploy:
      resources:
        limits:
          memory: 10g
  
  database:
    platform: linux/amd64
    image: fjardim/mysql
    container_name: database
    hostname: database
    ports:
        - "3306:3306"
    deploy:
      resources:
        limits:
          memory: 10g
    command: mysqld --innodb-flush-method=O_DSYNC --innodb-use-native-aio=OFF --init-file /data/application/init.sql
    volumes:
        - ./base/mysql/data:/var/lib/mysql
        - ./base/mysql/init.sql:/data/application/init.sql
    environment:
        MYSQL_ROOT_USER: root
        MYSQL_ROOT_PASSWORD: secret
        MYSQL_DATABASE: hue
        MYSQL_USER: root
        MYSQL_PASSWORD: secret
        
  postgres:
    platform: linux/amd64
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis: 
    platform: linux/amd64
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    
volumes:
  postgres-db-volume:
